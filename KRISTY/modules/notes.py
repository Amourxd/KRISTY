import re, ast
from io import BytesIO
import random
from typing import Optional

import KRISTY.modules.sql.notes_sql as sql
from KRISTY import LOGGER, JOIN_LOGGER, SUPPORT_CHAT, dispatcher, DRAGONS
from KRISTY.modules.disable import DisableAbleCommandHandler
from KRISTY.modules.helper_funcs.handlers import MessageHandlerChecker
from KRISTY.modules.helper_funcs.chat_status import user_admin, connection_status
from KRISTY.modules.helper_funcs.misc import build_keyboard, revert_buttons
from KRISTY.modules.helper_funcs.msg_types import get_note_type
from KRISTY.modules.helper_funcs.string_handling import (
    escape_invalid_curly_brackets,
)
from telegram import (
    MAX_MESSAGE_LENGTH,
    InlineKeyboardMarkup,
    Message,
    ParseMode,
    Update,
    InlineKeyboardButton,
)
from telegram.error import BadRequest
from telegram.utils.helpers import escape_markdown, mention_markdown
from telegram.ext import (
    CallbackContext,
    CommandHandler,
    CallbackQueryHandler,
    Filters,
    MessageHandler,
)

FILE_MATCHER = re.compile(r"^###file_id(!photo)?###:(.*?)(?:\s|$)")
STICKER_MATCHER = re.compile(r"^###sticker(!photo)?###:")
BUTTON_MATCHER = re.compile(r"^###button(!photo)?###:(.*?)(?:\s|$)")
MYFILE_MATCHER = re.compile(r"^###file(!photo)?###:")
MYPHOTO_MATCHER = re.compile(r"^###photo(!photo)?###:")
MYAUDIO_MATCHER = re.compile(r"^###audio(!photo)?###:")
MYVOICE_MATCHER = re.compile(r"^###voice(!photo)?###:")
MYVIDEO_MATCHER = re.compile(r"^###video(!photo)?###:")
MYVIDEONOTE_MATCHER = re.compile(r"^###video_note(!photo)?###:")

ENUM_FUNC_MAP = {
    sql.Types.TEXT.value: dispatcher.bot.send_message,
    sql.Types.BUTTON_TEXT.value: dispatcher.bot.send_message,
    sql.Types.STICKER.value: dispatcher.bot.send_sticker,
    sql.Types.DOCUMENT.value: dispatcher.bot.send_document,
    sql.Types.PHOTO.value: dispatcher.bot.send_photo,
    sql.Types.AUDIO.value: dispatcher.bot.send_audio,
    sql.Types.VOICE.value: dispatcher.bot.send_voice,
    sql.Types.VIDEO.value: dispatcher.bot.send_video,
}


# Do not async
def get(update, context, notename, show_none=True, no_format=False):
    bot = context.bot
    chat_id = update.effective_message.chat.id
    note_chat_id = update.effective_chat.id
    note = sql.get_note(note_chat_id, notename)
    message = update.effective_message  # type: Optional[Message]

    if note:
        if MessageHandlerChecker.check_user(update.effective_user.id):
            return
        # If we're replying to a message, reply to that message (unless it's an error)
        if message.reply_to_message:
            reply_id = message.reply_to_message.message_id
        else:
            reply_id = message.message_id
        if note.is_reply:
            if JOIN_LOGGER:
                try:
                    bot.forward_message(
                        chat_id=chat_id,
                        from_chat_id=JOIN_LOGGER,
                        message_id=note.value,
                    )
                except BadRequest as excp:
                    if excp.message == "Message to forward not found":
                        message.reply_text(
                            "·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á Íú±·¥á·¥á·¥çÍú± ·¥õ·¥è  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥  ü·¥èÍú±·¥õ - …™' ü ü  Ä·¥á·¥ç·¥è·¥†·¥á …™·¥õ"
                            "Íú∞ Ä·¥è·¥ç  è·¥è·¥ú Ä …¥·¥è·¥õ·¥áÍú±  ü…™Íú±·¥õ  ô·¥Ä ô èü•Ä.",
                        )
                        sql.rm_note(note_chat_id, notename)
                    else:
                        raise
            else:
                try:
                    bot.forward_message(
                        chat_id=chat_id,
                        from_chat_id=chat_id,
                        message_id=note.value,
                    )
                except BadRequest as excp:
                    if excp.message == "Message to forward not found":
                        message.reply_text(
                            " ü·¥è·¥è·¥ãÍú±  ü…™·¥ã·¥á ·¥õ ú·¥á ·¥è Ä…™…¢…™…¥·¥Ä ü Íú±·¥á…¥·¥Ö·¥á Ä ·¥èÍú∞ ·¥õ ú…™Íú± …¥·¥è·¥õ·¥á  ú·¥ÄÍú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö  ô·¥Ä ô èü•Ä"
                            "·¥õ ú·¥á…™ Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á - Íú±·¥è Ä Ä è! …¢·¥á·¥õ  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è Íú±·¥õ·¥Ä Ä·¥õ ·¥úÍú±…™…¥…¢ ·¥Ä "
                            "·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥Ö·¥ú·¥ç·¥ò ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥õ ú…™Íú±  ô·¥Ä ô èü•Ä. …™' ü ü  Ä·¥á·¥ç·¥è·¥†·¥á ·¥õ ú…™Íú± …¥·¥è·¥õ·¥á Íú∞ Ä·¥è·¥ç "
                            " è·¥è·¥ú Ä Íú±·¥Ä·¥†·¥á·¥Ö …¥·¥è·¥õ·¥áÍú±  ô·¥Ä ô èü•Ä.",
                        )
                        sql.rm_note(note_chat_id, notename)
                    else:
                        raise
        else:
            VALID_NOTE_FORMATTERS = [
                "first",
                "last",
                "fullname",
                "username",
                "id",
                "chatname",
                "mention",
            ]
            valid_format = escape_invalid_curly_brackets(
                note.value,
                VALID_NOTE_FORMATTERS,
            )
            if valid_format:
                if not no_format:
                    if "%%%" in valid_format:
                        split = valid_format.split("%%%")
                        if all(split):
                            text = random.choice(split)
                        else:
                            text = valid_format
                    else:
                        text = valid_format
                else:
                    text = valid_format
                text = text.format(
                    first=escape_markdown(message.from_user.first_name),
                    last=escape_markdown(
                        message.from_user.last_name or message.from_user.first_name,
                    ),
                    fullname=escape_markdown(
                        " ".join(
                            [message.from_user.first_name, message.from_user.last_name]
                            if message.from_user.last_name
                            else [message.from_user.first_name],
                        ),
                    ),
                    username="@" + message.from_user.username
                    if message.from_user.username
                    else mention_markdown(
                        message.from_user.id,
                        message.from_user.first_name,
                    ),
                    mention=mention_markdown(
                        message.from_user.id,
                        message.from_user.first_name,
                    ),
                    chatname=escape_markdown(
                        message.chat.title
                        if message.chat.type != "private"
                        else message.from_user.first_name,
                    ),
                    id=message.from_user.id,
                )
            else:
                text = ""

            keyb = []
            parseMode = ParseMode.MARKDOWN
            buttons = sql.get_buttons(note_chat_id, notename)
            if no_format:
                parseMode = None
                text += revert_buttons(buttons)
            else:
                keyb = build_keyboard(buttons)

            keyboard = InlineKeyboardMarkup(keyb)

            try:
                if note.msgtype in (sql.Types.BUTTON_TEXT, sql.Types.TEXT):
                    bot.send_message(
                        chat_id,
                        text,
                        reply_to_message_id=reply_id,
                        parse_mode=parseMode,
                        disable_web_page_preview=True,
                        reply_markup=keyboard,
                    )
                else:
                    ENUM_FUNC_MAP[note.msgtype](
                        chat_id,
                        note.file,
                        caption=text,
                        reply_to_message_id=reply_id,
                        parse_mode=parseMode,
                        reply_markup=keyboard,
                    )

            except BadRequest as excp:
                if excp.message == "Entity_mention_user_invalid":
                    message.reply_text(
                        " ü·¥è·¥è·¥ãÍú±  ü…™·¥ã·¥á  è·¥è·¥ú ·¥õ Ä…™·¥á·¥Ö ·¥õ·¥è ·¥ç·¥á…¥·¥õ…™·¥è…¥ Íú±·¥è·¥ç·¥á·¥è…¥·¥á …™'·¥†·¥á …¥·¥á·¥†·¥á Ä Íú±·¥á·¥á…¥  ô·¥áÍú∞·¥è Ä·¥á  ô·¥Ä ô èü•Ä. …™Íú∞  è·¥è·¥ú  Ä·¥á·¥Ä ü ü è "
                        "·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ç·¥á…¥·¥õ…™·¥è…¥ ·¥õ ú·¥á·¥ç, Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥è…¥·¥á ·¥èÍú∞ ·¥õ ú·¥á…™ Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥õ·¥è ·¥ç·¥á, ·¥Ä…¥·¥Ö …™' ü ü  ô·¥á ·¥Ä ô ü·¥á "
                        "·¥õ·¥è ·¥õ·¥Ä…¢ ·¥õ ú·¥á·¥ç  ô·¥Ä ô èü•Ä!",
                    )
                elif FILE_MATCHER.match(note.value):
                    message.reply_text(
                        "·¥õ ú…™Íú± …¥·¥è·¥õ·¥á ·¥°·¥ÄÍú± ·¥Ä…¥ …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ ü è …™·¥ç·¥ò·¥è Ä·¥õ·¥á·¥Ö Íú∞…™ ü·¥á Íú∞ Ä·¥è·¥ç ·¥Ä…¥·¥è·¥õ ú·¥á Ä  ô·¥è·¥õ - …™ ·¥Ñ·¥Ä…¥'·¥õ ·¥úÍú±·¥á "
                        "…™·¥õ  ô·¥Ä ô èü•Ä. …™Íú∞  è·¥è·¥ú  Ä·¥á·¥Ä ü ü è …¥·¥á·¥á·¥Ö …™·¥õ,  è·¥è·¥ú' ü ü  ú·¥Ä·¥†·¥á ·¥õ·¥è Íú±·¥Ä·¥†·¥á …™·¥õ ·¥Ä…¢·¥Ä…™…¥. …™…¥ "
                        "·¥õ ú·¥á ·¥ç·¥á·¥Ä…¥·¥õ…™·¥ç·¥á, …™' ü ü  Ä·¥á·¥ç·¥è·¥†·¥á …™·¥õ Íú∞ Ä·¥è·¥ç  è·¥è·¥ú Ä …¥·¥è·¥õ·¥áÍú±  ü…™Íú±·¥õ  ô·¥Ä ô èü•Ä.",
                    )
                    sql.rm_note(note_chat_id, notename)
                else:
                    message.reply_text(
                        "·¥õ ú…™Íú± …¥·¥è·¥õ·¥á ·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ  ô·¥á Íú±·¥á…¥·¥õ, ·¥ÄÍú± …™·¥õ …™Íú± …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ ü è Íú∞·¥è Ä·¥ç·¥Ä·¥õ·¥õ·¥á·¥Ö  ô·¥Ä ô èü•Ä. ·¥ÄÍú±·¥ã …™…¥ "
                        f"@{SUPPORT_CHAT} …™Íú∞  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ Íú∞…™…¢·¥ú Ä·¥á ·¥è·¥ú·¥õ ·¥° ú è  ô·¥Ä ô èü•Ä!",
                    )
                    LOGGER.exception(
                        "could not parse message #%s in chat %s",
                        notename,
                        str(note_chat_id),
                    )
                    LOGGER.warning("message was: %s", str(note.value))
        return
    if show_none:
        message.reply_text("·¥õ ú…™Íú± …¥·¥è·¥õ·¥á ·¥Ö·¥è·¥áÍú±…¥'·¥õ ·¥áx…™Íú±·¥õ  ô·¥Ä ô èü•Ä")


@connection_status
def cmd_get(update: Update, context: CallbackContext):
    bot, args = context.bot, context.args
    if len(args) >= 2 and args[1].lower() == "noformat":
        get(update, context, args[0].lower(), show_none=True, no_format=True)
    elif len(args) >= 1:
        get(update, context, args[0].lower(), show_none=True)
    else:
        update.effective_message.reply_text("…¢·¥á·¥õ  Ä·¥á·¥ã·¥õ")


@connection_status
def hash_get(update: Update, context: CallbackContext):
    message = update.effective_message.text
    fst_word = message.split()[0]
    no_hash = fst_word[1:].lower()
    get(update, context, no_hash, show_none=False)


@connection_status
def slash_get(update: Update, context: CallbackContext):
    message, chat_id = update.effective_message.text, update.effective_chat.id
    no_slash = message[1:]
    note_list = sql.get_all_chat_notes(chat_id)

    try:
        noteid = note_list[int(no_slash) - 1]
        note_name = str(noteid).strip(">").split()[1]
        get(update, context, note_name, show_none=False)
    except IndexError:
        update.effective_message.reply_text("·¥° Ä·¥è…¥…¢ …¥·¥è·¥õ·¥á …™·¥Ö  ô·¥Ä ô èü•Ä")


@user_admin
@connection_status
def save(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    msg = update.effective_message  # type: Optional[Message]

    note_name, text, data_type, content, buttons = get_note_type(msg)
    note_name = note_name.lower()
    if data_type is None:
        msg.reply_text("  ô·¥Ä ô èü•Ä, ·¥õ ú·¥á Ä·¥á'Íú± …¥·¥è …¥·¥è·¥õ·¥á")
        return

    sql.add_note_to_db(
        chat_id,
        note_name,
        text,
        data_type,
        buttons=buttons,
        file=content,
    )

    msg.reply_text(
        f" è·¥áÍú±! ·¥Ä·¥Ö·¥Ö·¥á·¥Ö `{note_name}`.\n…¢·¥á·¥õ …™·¥õ ·¥°…™·¥õ ú `/get {note_name}`, ·¥è Ä `#{note_name}`  ô·¥Ä ô èü•Ä",
        parse_mode=ParseMode.MARKDOWN,
    )

    if msg.reply_to_message and msg.reply_to_message.from_user.is_bot:
        if text:
            msg.reply_text(
                "Íú±·¥á·¥á·¥çÍú±  ü…™·¥ã·¥á  è·¥è·¥ú' Ä·¥á ·¥õ Ä è…™…¥…¢ ·¥õ·¥è Íú±·¥Ä·¥†·¥á ·¥Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á Íú∞ Ä·¥è·¥ç ·¥Ä  ô·¥è·¥õ  ô·¥Ä ô èü•Ä. ·¥ú…¥Íú∞·¥è Ä·¥õ·¥ú…¥·¥Ä·¥õ·¥á ü è, "
                " ô·¥è·¥õÍú± ·¥Ñ·¥Ä…¥'·¥õ Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö  ô·¥è·¥õ ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú±, Íú±·¥è …™ ·¥Ñ·¥Ä…¥'·¥õ Íú±·¥Ä·¥†·¥á ·¥õ ú·¥á ·¥áx·¥Ä·¥Ñ·¥õ ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á  ô·¥Ä ô èü•Ä. "
                "\n…™' ü ü Íú±·¥Ä·¥†·¥á ·¥Ä ü ü ·¥õ ú·¥á ·¥õ·¥áx·¥õ …™ ·¥Ñ·¥Ä…¥,  ô·¥ú·¥õ …™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥ç·¥è Ä·¥á,  è·¥è·¥ú' ü ü  ú·¥Ä·¥†·¥á ·¥õ·¥è "
                "Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á  è·¥è·¥ú ÄÍú±·¥á üÍú∞, ·¥Ä…¥·¥Ö ·¥õ ú·¥á…¥ Íú±·¥Ä·¥†·¥á …™·¥õ  ô·¥Ä ô èü•Ä.",
            )
        else:
            msg.reply_text(
                " ô·¥è·¥õÍú± ·¥Ä Ä·¥á ·¥ã…™…¥·¥Ö·¥Ä  ú·¥Ä…¥·¥Ö…™·¥Ñ·¥Ä·¥ò·¥ò·¥á·¥Ö  ô è ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç, ·¥ç·¥Ä·¥ã…™…¥…¢ …™·¥õ  ú·¥Ä Ä·¥Ö Íú∞·¥è Ä  ô·¥è·¥õÍú± ·¥õ·¥è "
                "…™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ ·¥°…™·¥õ ú ·¥è·¥õ ú·¥á Ä  ô·¥è·¥õÍú±, Íú±·¥è …™ ·¥Ñ·¥Ä…¥'·¥õ Íú±·¥Ä·¥†·¥á ·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á "
                " ü…™·¥ã·¥á …™ ·¥úÍú±·¥ú·¥Ä ü ü è ·¥°·¥è·¥ú ü·¥Ö - ·¥Ö·¥è  è·¥è·¥ú ·¥ç…™…¥·¥Ö Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö…™…¥…¢ …™·¥õ ·¥Ä…¥·¥Ö "
                "·¥õ ú·¥á…¥ Íú±·¥Ä·¥†…™…¥…¢ ·¥õ ú·¥Ä·¥õ …¥·¥á·¥° ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á? ·¥õ ú·¥Ä…¥·¥ãÍú±  ô·¥Ä ô èü•Ä!",
            )
        return


@user_admin
@connection_status
def clear(update: Update, context: CallbackContext):
    args = context.args
    chat_id = update.effective_chat.id
    if len(args) >= 1:
        notename = args[0].lower()

        if sql.rm_note(chat_id, notename):
            update.effective_message.reply_text("Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö …¥·¥è·¥õ·¥á  ô·¥Ä ô èü•Ä.")
        else:
            update.effective_message.reply_text("·¥õ ú·¥Ä·¥õ'Íú± …¥·¥è·¥õ ·¥Ä …¥·¥è·¥õ·¥á …™…¥ ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥ÄÍú±·¥á  ô·¥Ä ô èü•Ä!")


def clearall(update: Update, context: CallbackContext):
    chat = update.effective_chat
    user = update.effective_user
    member = chat.get_member(user.id)
    if member.status != "creator" and user.id not in DRAGONS:
        update.effective_message.reply_text(
            "·¥è…¥ ü è ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥Ñ ü·¥á·¥Ä Ä ·¥Ä ü ü …¥·¥è·¥õ·¥áÍú± ·¥Ä·¥õ ·¥è…¥·¥Ñ·¥á  ô·¥Ä ô èü•Ä.",
        )
    else:
        buttons = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="Delete all notes",
                        callback_data="notes_rmall",
                    ),
                ],
                [InlineKeyboardButton(text="Cancel", callback_data="notes_cancel")],
            ],
        )
        update.effective_message.reply_text(
            f"·¥Ä Ä·¥á  è·¥è·¥ú Íú±·¥ú Ä·¥á  è·¥è·¥ú ·¥°·¥è·¥ú ü·¥Ö  ü…™·¥ã·¥á ·¥õ·¥è ·¥Ñ ü·¥á·¥Ä Ä ·¥Ä ü ü …¥·¥è·¥õ·¥áÍú± …™…¥ {chat.title}? ·¥õ ú…™Íú± ·¥Ä·¥Ñ·¥õ…™·¥è…¥ ·¥Ñ·¥Ä…¥…¥·¥è·¥õ  ô·¥á ·¥ú…¥·¥Ö·¥è…¥·¥á  ô·¥Ä ô èü•Ä.",
            reply_markup=buttons,
            parse_mode=ParseMode.MARKDOWN,
        )


def clearall_btn(update: Update, context: CallbackContext):
    query = update.callback_query
    chat = update.effective_chat
    message = update.effective_message
    member = chat.get_member(query.from_user.id)
    if query.data == "notes_rmall":
        if member.status == "creator" or query.from_user.id in DRAGONS:
            note_list = sql.get_all_chat_notes(chat.id)
            try:
                for notename in note_list:
                    note = notename.name.lower()
                    sql.rm_note(chat.id, note)
                message.edit_text("·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä ü ü …¥·¥è·¥õ·¥áÍú±  ô·¥Ä ô èü•Ä.")
            except BadRequest:
                return

        if member.status == "administrator":
            query.answer("·¥è…¥ ü è ·¥è·¥°…¥·¥á Ä ·¥èÍú∞ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥Ö·¥è ·¥õ ú…™Íú±  ô·¥Ä ô èü•Ä.")

        if member.status == "member":
            query.answer(" è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™Íú±  ô·¥Ä ô èü•Ä.")
    elif query.data == "notes_cancel":
        if member.status == "creator" or query.from_user.id in DRAGONS:
            message.edit_text("·¥Ñ ü·¥á·¥Ä Ä…™…¥…¢ ·¥èÍú∞ ·¥Ä ü ü …¥·¥è·¥õ·¥áÍú±  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö  ô·¥Ä ô èü•Ä.")
            return
        if member.status == "administrator":
            query.answer("·¥è…¥ ü è ·¥è·¥°…¥·¥á Ä ·¥èÍú∞ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥Ö·¥è ·¥õ ú…™Íú±  ô·¥Ä ô èü•Ä.")
        if member.status == "member":
            query.answer(" è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™Íú±  ô·¥Ä ô èü•Ä.")


@connection_status
def list_notes(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    note_list = sql.get_all_chat_notes(chat_id)
    notes = len(note_list) + 1
    msg = "…¢·¥á·¥õ …¥·¥è·¥õ·¥á  ô è `/notenumber` ·¥è Ä `#notename`  ô·¥Ä ô èü•Ä \n\n  *…™·¥Ö*    *…¥·¥è·¥õ·¥á* \n"
    for note_id, note in zip(range(1, notes), note_list):
        if note_id < 10:
            note_name = f"`{note_id:2}.`  `#{(note.name.lower())}`\n"
        else:
            note_name = f"`{note_id}.`  `#{(note.name.lower())}`\n"
        if len(msg) + len(note_name) > MAX_MESSAGE_LENGTH:
            update.effective_message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)
            msg = ""
        msg += note_name

    if not note_list:
        try:
            update.effective_message.reply_text("…¥·¥è …¥·¥è·¥õ·¥áÍú± …™…¥ ·¥õ ú…™Íú± ·¥Ñ ú·¥Ä·¥õ  ô·¥Ä ô èü•Ä!")
        except BadRequest:
            update.effective_message.reply_text("…¥·¥è …¥·¥è·¥õ·¥áÍú± …™…¥ ·¥õ ú…™Íú± ·¥Ñ ú·¥Ä·¥õ  ô·¥Ä ô èü•Ä!", quote=False)

    elif len(msg) != 0:
        update.effective_message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)


def __import_data__(chat_id, data):
    failures = []
    for notename, notedata in data.get("extra", {}).items():
        match = FILE_MATCHER.match(notedata)
        matchsticker = STICKER_MATCHER.match(notedata)
        matchbtn = BUTTON_MATCHER.match(notedata)
        matchfile = MYFILE_MATCHER.match(notedata)
        matchphoto = MYPHOTO_MATCHER.match(notedata)
        matchaudio = MYAUDIO_MATCHER.match(notedata)
        matchvoice = MYVOICE_MATCHER.match(notedata)
        matchvideo = MYVIDEO_MATCHER.match(notedata)
        matchvn = MYVIDEONOTE_MATCHER.match(notedata)

        if match:
            failures.append(notename)
            notedata = notedata[match.end() :].strip()
            if notedata:
                sql.add_note_to_db(chat_id, notename[1:], notedata, sql.Types.TEXT)
        elif matchsticker:
            content = notedata[matchsticker.end() :].strip()
            if content:
                sql.add_note_to_db(
                    chat_id,
                    notename[1:],
                    notedata,
                    sql.Types.STICKER,
                    file=content,
                )
        elif matchbtn:
            parse = notedata[matchbtn.end() :].strip()
            notedata = parse.split("<###button###>")[0]
            buttons = parse.split("<###button###>")[1]
            buttons = ast.literal_eval(buttons)
            if buttons:
                sql.add_note_to_db(
                    chat_id,
                    notename[1:],
                    notedata,
                    sql.Types.BUTTON_TEXT,
                    buttons=buttons,
                )
        elif matchfile:
            file = notedata[matchfile.end() :].strip()
            file = file.split("<###TYPESPLIT###>")
            notedata = file[1]
            content = file[0]
            if content:
                sql.add_note_to_db(
                    chat_id,
                    notename[1:],
                    notedata,
                    sql.Types.DOCUMENT,
                    file=content,
                )
        elif matchphoto:
            photo = notedata[matchphoto.end() :].strip()
            photo = photo.split("<###TYPESPLIT###>")
            notedata = photo[1]
            content = photo[0]
            if content:
                sql.add_note_to_db(
                    chat_id,
                    notename[1:],
                    notedata,
                    sql.Types.PHOTO,
                    file=content,
                )
        elif matchaudio:
            audio = notedata[matchaudio.end() :].strip()
            audio = audio.split("<###TYPESPLIT###>")
            notedata = audio[1]
            content = audio[0]
            if content:
                sql.add_note_to_db(
                    chat_id,
                    notename[1:],
                    notedata,
                    sql.Types.AUDIO,
                    file=content,
                )
        elif matchvoice:
            voice = notedata[matchvoice.end() :].strip()
            voice = voice.split("<###TYPESPLIT###>")
            notedata = voice[1]
            content = voice[0]
            if content:
                sql.add_note_to_db(
                    chat_id,
                    notename[1:],
                    notedata,
                    sql.Types.VOICE,
                    file=content,
                )
        elif matchvideo:
            video = notedata[matchvideo.end() :].strip()
            video = video.split("<###TYPESPLIT###>")
            notedata = video[1]
            content = video[0]
            if content:
                sql.add_note_to_db(
                    chat_id,
                    notename[1:],
                    notedata,
                    sql.Types.VIDEO,
                    file=content,
                )
        elif matchvn:
            video_note = notedata[matchvn.end() :].strip()
            video_note = video_note.split("<###TYPESPLIT###>")
            notedata = video_note[1]
            content = video_note[0]
            if content:
                sql.add_note_to_db(
                    chat_id,
                    notename[1:],
                    notedata,
                    sql.Types.VIDEO_NOTE,
                    file=content,
                )
        else:
            sql.add_note_to_db(chat_id, notename[1:], notedata, sql.Types.TEXT)

    if failures:
        with BytesIO(str.encode("\n".join(failures))) as output:
            output.name = "failed_imports.txt"
            dispatcher.bot.send_document(
                chat_id,
                document=output,
                filename="failed_imports.txt",
                caption="·¥õ ú·¥áÍú±·¥á Íú∞…™ ü·¥áÍú±/·¥ò ú·¥è·¥õ·¥èÍú± Íú∞·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …™·¥ç·¥ò·¥è Ä·¥õ ·¥Ö·¥ú·¥á ·¥õ·¥è ·¥è Ä…™…¢…™…¥·¥Ä·¥õ…™…¥…¢ "
                "Íú∞ Ä·¥è·¥ç ·¥Ä…¥·¥è·¥õ ú·¥á Ä  ô·¥è·¥õ  ô·¥Ä ô èü•Ä. ·¥õ ú…™Íú± …™Íú± ·¥Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä·¥ò…™  Ä·¥áÍú±·¥õ Ä…™·¥Ñ·¥õ…™·¥è…¥, ·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥'·¥õ "
                " ô·¥á ·¥Ä·¥†·¥è…™·¥Ö·¥á·¥Ö. Íú±·¥è Ä Ä è Íú∞·¥è Ä ·¥õ ú·¥á …™…¥·¥Ñ·¥è…¥·¥†·¥á…¥…™·¥á…¥·¥Ñ·¥á  ô·¥Ä ô èü•Ä!",
            )


def __stats__():
    return f"√ó {sql.num_notes()} …¥·¥è·¥õ·¥áÍú±, ·¥Ä·¥Ñ Ä·¥èÍú±Íú± {sql.num_chats()} ·¥Ñ ú·¥Ä·¥õÍú±  ô·¥Ä ô èü•Ä."


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(chat_id, user_id):
    notes = sql.get_all_chat_notes(chat_id)
    return f"·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á `{len(notes)}` …¥·¥è·¥õ·¥áÍú± …™…¥ ·¥õ ú…™Íú± ·¥Ñ ú·¥Ä·¥õ  ô·¥Ä ô èü•Ä."


__help__ = """
¬ª `/get` <notename>*:* …¢·¥á·¥õ ·¥õ ú·¥á …¥·¥è·¥õ·¥á ·¥°…™·¥õ ú ·¥õ ú…™Íú± …¥·¥è·¥õ·¥á…¥·¥Ä·¥ç·¥á
¬ª #<notename>*:* Íú±·¥Ä·¥ç·¥á ·¥ÄÍú± /get
¬ª `/notes` or `/saved`*:*  ü…™Íú±·¥õ ·¥Ä ü ü Íú±·¥Ä·¥†·¥á·¥Ö …¥·¥è·¥õ·¥áÍú± …™…¥ ·¥õ ú…™Íú± ·¥Ñ ú·¥Ä·¥õ
¬ª `/number` *:* ·¥°…™ ü ü ·¥ò·¥ú ü ü ·¥õ ú·¥á …¥·¥è·¥õ·¥á ·¥èÍú∞ ·¥õ ú·¥Ä·¥õ …¥·¥ú·¥ç ô·¥á Ä …™…¥ ·¥õ ú·¥á  ü…™Íú±·¥õ
…™Íú∞  è·¥è·¥ú ·¥°·¥è·¥ú ü·¥Ö  ü…™·¥ã·¥á ·¥õ·¥è  Ä·¥á·¥õ Ä…™·¥á·¥†·¥á ·¥õ ú·¥á ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õÍú± ·¥èÍú∞ ·¥Ä …¥·¥è·¥õ·¥á ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥Ä…¥ è Íú∞·¥è Ä·¥ç·¥Ä·¥õ·¥õ…™…¥…¢, ·¥úÍú±·¥á `/get <…¥·¥è·¥õ·¥á…¥·¥Ä·¥ç·¥á> …¥·¥èÍú∞·¥è Ä·¥ç·¥Ä·¥õ`. ·¥õ ú…™Íú± ·¥Ñ·¥Ä…¥ \
 ô·¥á ·¥úÍú±·¥áÍú∞·¥ú ü ·¥° ú·¥á…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ…™…¥…¢ ·¥Ä ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ …¥·¥è·¥õ·¥á

*Admins only:*
¬ª `/save` <notename> <notedata>*:* Íú±·¥Ä·¥†·¥áÍú± …¥·¥è·¥õ·¥á·¥Ö·¥Ä·¥õ·¥Ä ·¥ÄÍú± ·¥Ä …¥·¥è·¥õ·¥á ·¥°…™·¥õ ú …¥·¥Ä·¥ç·¥á …¥·¥è·¥õ·¥á…¥·¥Ä·¥ç·¥á
·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ñ·¥Ä…¥  ô·¥á ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥Ä …¥·¥è·¥õ·¥á  ô è ·¥úÍú±…™…¥…¢ Íú±·¥õ·¥Ä…¥·¥Ö·¥Ä Ä·¥Ö ·¥ç·¥Ä Ä·¥ã·¥Ö·¥è·¥°…¥  ü…™…¥·¥ã Íú± è…¥·¥õ·¥Äx - ·¥õ ú·¥á  ü…™…¥·¥ã Íú± ú·¥è·¥ú ü·¥Ö ·¥ä·¥úÍú±·¥õ  ô·¥á ·¥ò Ä·¥á·¥ò·¥á…¥·¥Ö·¥á·¥Ö ·¥°…™·¥õ ú ·¥Ä \
`buttonurl:` Íú±·¥á·¥Ñ·¥õ…™·¥è…¥, ·¥ÄÍú± Íú±·¥ú·¥Ñ ú: `[Íú±·¥è·¥ç·¥á ü…™…¥·¥ã]( ô·¥ú·¥õ·¥õ·¥è…¥·¥ú Ä ü:·¥áx·¥Ä·¥ç·¥ò ü·¥á.·¥Ñ·¥è·¥ç)`. ·¥Ñ ú·¥á·¥Ñ·¥ã `/markdownhelp` Íú∞·¥è Ä ·¥ç·¥è Ä·¥á …™…¥Íú∞·¥è
¬ª `/save` <notename>*:* Íú±·¥Ä·¥†·¥á ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥ÄÍú± ·¥Ä …¥·¥è·¥õ·¥á ·¥°…™·¥õ ú …¥·¥Ä·¥ç·¥á …¥·¥è·¥õ·¥á…¥·¥Ä·¥ç·¥á
Íú±·¥á·¥ò·¥Ä Ä·¥Ä·¥õ·¥á ·¥Ö…™Íú∞Íú∞  Ä·¥á·¥ò ü…™·¥áÍú±  ô è `%%%` ·¥õ·¥è …¢·¥á·¥õ  Ä·¥Ä…¥·¥Ö·¥è·¥ç …¥·¥è·¥õ·¥áÍú±
 *·¥áx·¥Ä·¥ç·¥ò ü·¥á:*
 `/save …¥·¥è·¥õ·¥á…¥·¥Ä·¥ç·¥á
 Ä·¥á·¥ò ü è 1
%%% 
 Ä·¥á·¥ò ü è 2
%%%
 Ä·¥á·¥ò ü è 3`
¬ª `/clear` <notename>*:* ·¥Ñ ü·¥á·¥Ä Ä …¥·¥è·¥õ·¥á ·¥°…™·¥õ ú ·¥õ ú…™Íú± …¥·¥Ä·¥ç·¥á
¬ª `/removeallnotes`*:*  Ä·¥á·¥ç·¥è·¥†·¥áÍú± ·¥Ä ü ü …¥·¥è·¥õ·¥áÍú± Íú∞ Ä·¥è·¥ç ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò

 *…¥·¥è·¥õ·¥á:* …¥·¥è·¥õ·¥á …¥·¥Ä·¥ç·¥áÍú± ·¥Ä Ä·¥á ·¥Ñ·¥ÄÍú±·¥á-…™…¥Íú±·¥á…¥Íú±…™·¥õ…™·¥†·¥á, ·¥Ä…¥·¥Ö ·¥õ ú·¥á è ·¥Ä Ä·¥á ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è ·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ·¥á·¥Ö ·¥õ·¥è  ü·¥è·¥°·¥á Ä·¥Ñ·¥ÄÍú±·¥á  ô·¥áÍú∞·¥è Ä·¥á …¢·¥á·¥õ·¥õ…™…¥…¢ Íú±·¥Ä·¥†·¥á·¥Ö.
"""

__mod_name__ = "NOTES"

GET_HANDLER = CommandHandler("get", cmd_get, run_async=True)
HASH_GET_HANDLER = MessageHandler(Filters.regex(r"^#[^\s]+"), hash_get, run_async=True)
SLASH_GET_HANDLER = MessageHandler(Filters.regex(r"^/\d+$"), slash_get, run_async=True)
SAVE_HANDLER = CommandHandler("save", save, run_async=True)
DELETE_HANDLER = CommandHandler("clear", clear, run_async=True)
LIST_HANDLER = DisableAbleCommandHandler(
    ["notes", "saved"], list_notes, admin_ok=True, run_async=True
)
CLEARALL = DisableAbleCommandHandler("removeallnotes", clearall, run_async=True)
CLEARALL_BTN = CallbackQueryHandler(clearall_btn, pattern=r"notes_.*", run_async=True)

dispatcher.add_handler(GET_HANDLER)
dispatcher.add_handler(SAVE_HANDLER)
dispatcher.add_handler(LIST_HANDLER)
dispatcher.add_handler(DELETE_HANDLER)
dispatcher.add_handler(HASH_GET_HANDLER)
dispatcher.add_handler(SLASH_GET_HANDLER)
dispatcher.add_handler(CLEARALL)
dispatcher.add_handler(CLEARALL_BTN)
