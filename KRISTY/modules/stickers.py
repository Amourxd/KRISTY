import math
import os
import urllib.request as urllib
from html import escape

import requests
from bs4 import BeautifulSoup as bs
from PIL import Image
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ParseMode,
    TelegramError,
    Update,
)
from telegram.ext import CallbackContext, run_async
from telegram.utils.helpers import mention_html

from KRISTY import dispatcher
from KRISTY.modules.disable import DisableAbleCommandHandler

combot_stickers_url = "https://combot.org/telegram/stickers?q="


@run_async
def stickerid(update: Update, context: CallbackContext):
    msg = update.effective_message
    if msg.reply_to_message and msg.reply_to_message.sticker:
        update.effective_message.reply_text(
            " ú·¥á è "
            + f"{mention_html(msg.from_user.id, msg.from_user.first_name)}  ô·¥Ä ô èü•Ä!"
            + ", ·¥õ ú·¥á Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä …™·¥Ö  è·¥è·¥ú ·¥Ä Ä·¥á  Ä·¥á·¥ò ü è…™…¥…¢ …™Íú±  :\n <code>"
            + escape(msg.reply_to_message.sticker.file_id)
            + "</code>",
            parse_mode=ParseMode.HTML,
        )
    else:
        update.effective_message.reply_text(
            " ú·¥á è "
            + f"{mention_html(msg.from_user.id, msg.from_user.first_name)}  ô·¥Ä ô èü•Ä!"
            + ", ·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥õ·¥è …¢·¥á·¥õ Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä …™·¥Ö",
            parse_mode=ParseMode.HTML,
        )


@run_async
def cb_sticker(update: Update, context: CallbackContext):
    msg = update.effective_message
    split = msg.text.split(" ", 1)
    if len(split) == 1:
        msg.reply_text("·¥ò Ä·¥è·¥†…™·¥Ö·¥á Íú±·¥è·¥ç·¥á …¥·¥Ä·¥ç·¥á ·¥õ·¥è Íú±·¥á·¥Ä Ä·¥Ñ ú Íú∞·¥è Ä ·¥ò·¥Ä·¥Ñ·¥ã  ô·¥Ä ô èü•Ä.")
        return
    text = requests.get(combot_stickers_url + split[1]).text
    soup = bs(text, "lxml")
    results = soup.find_all("a", {"class": "sticker-pack__btn"})
    titles = soup.find_all("div", "sticker-pack__title")
    if not results:
        msg.reply_text("…¥·¥è  Ä·¥áÍú±·¥ú ü·¥õÍú± Íú∞·¥è·¥ú…¥·¥Ö  ô·¥Ä ô èü•Ä.")
        return
    reply = f"Íú±·¥õ…™·¥Ñ·¥ã·¥á ÄÍú± Íú∞·¥è Ä *{split[1]}*:"
    for result, title in zip(results, titles):
        link = result["href"]
        reply += f"\n‚Ä¢ [{title.get_text()}]({link})"
    msg.reply_text(reply, parse_mode=ParseMode.MARKDOWN)


def getsticker(update: Update, context: CallbackContext):
    bot = context.bot
    msg = update.effective_message
    chat_id = update.effective_chat.id
    if msg.reply_to_message and msg.reply_to_message.sticker:
        file_id = msg.reply_to_message.sticker.file_id
        new_file = bot.get_file(file_id)
        new_file.download("sticker.png")
        bot.send_document(chat_id, document=open("sticker.png", "rb"))
        os.remove("sticker.png")
    else:
        update.effective_message.reply_text(
            "·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä Íú∞·¥è Ä ·¥ç·¥á ·¥õ·¥è ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™·¥õÍú± ·¥ò…¥…¢  ô·¥Ä ô èü•Ä."
        )

@run_async
def kang(update: Update, context: CallbackContext):
    msg = update.effective_message
    user = update.effective_user
    args = context.args
    packnum = 0
    packname = "a" + str(user.id) + "_by_" + context.bot.username
    packname_found = 0
    max_stickers = 120
    while packname_found == 0:
        try:
            stickerset = context.bot.get_sticker_set(packname)
            if len(stickerset.stickers) >= max_stickers:
                packnum += 1
                packname = (
                    "a"
                    + str(packnum)
                    + "_"
                    + str(user.id)
                    + "_by_"
                    + context.bot.username
                )
            else:
                packname_found = 1
        except TelegramError as e:
            if e.message == "Stickerset_invalid":
                packname_found = 1
    kangsticker = "kangsticker.png"
    is_animated = False
    file_id = ""

    if msg.reply_to_message:
        if msg.reply_to_message.sticker:
            if msg.reply_to_message.sticker.is_animated:
                is_animated = True
            file_id = msg.reply_to_message.sticker.file_id

        elif msg.reply_to_message.photo:
            file_id = msg.reply_to_message.photo[-1].file_id
        elif msg.reply_to_message.document:
            file_id = msg.reply_to_message.document.file_id
        else:
            msg.reply_text(" è·¥á·¥Ä, …™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ã·¥Ä…¥…¢ ·¥õ ú·¥Ä·¥õ  ô·¥Ä ô èü•Ä.")

        kang_file = context.bot.get_file(file_id)
        if not is_animated:
            kang_file.download("kangsticker.png")
        else:
            kang_file.download("kangsticker.tgs")

        if args:
            sticker_emoji = str(args[0])
        elif msg.reply_to_message.sticker and msg.reply_to_message.sticker.emoji:
            sticker_emoji = msg.reply_to_message.sticker.emoji
        else:
            sticker_emoji = "ü§î"

        if not is_animated:
            try:
                im = Image.open(kangsticker)
                maxsize = (512, 512)
                if (im.width and im.height) < 512:
                    size1 = im.width
                    size2 = im.height
                    if im.width > im.height:
                        scale = 512 / size1
                        size1new = 512
                        size2new = size2 * scale
                    else:
                        scale = 512 / size2
                        size1new = size1 * scale
                        size2new = 512
                    size1new = math.floor(size1new)
                    size2new = math.floor(size2new)
                    sizenew = (size1new, size2new)
                    im = im.resize(sizenew)
                else:
                    im.thumbnail(maxsize)
                if not msg.reply_to_message.sticker:
                    im.save(kangsticker, "PNG")
                context.bot.add_sticker_to_set(
                    user_id=user.id,
                    name=packname,
                    png_sticker=open("kangsticker.png", "rb"),
                    emojis=sticker_emoji,
                )
                msg.reply_text(
                    f" è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è [·¥ò·¥Ä·¥Ñ·¥ã](t.me/addstickers/{packname})"
                    + f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}  ô·¥Ä ô èü•Ä!",
                    parse_mode=ParseMode.MARKDOWN,
                )

            except OSError as e:
                msg.reply_text("…™ ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è ·¥ã·¥Ä…¥…¢ …™·¥ç·¥Ä…¢·¥áÍú±  ô·¥Ä ô èü•Ä.")
                print(e)
                return

            except TelegramError as e:
                if e.message == "Stickerset_invalid":
                    makepack_internal(
                        update,
                        context,
                        msg,
                        user,
                        sticker_emoji,
                        packname,
                        packnum,
                        png_sticker=open("kangsticker.png", "rb"),
                    )
                elif e.message == "Sticker_png_dimensions":
                    im.save(kangsticker, "PNG")
                    context.bot.add_sticker_to_set(
                        user_id=user.id,
                        name=packname,
                        png_sticker=open("kangsticker.png", "rb"),
                        emojis=sticker_emoji,
                    )
                    msg.reply_text(
                        f" è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è [·¥ò·¥Ä·¥Ñ·¥ã](t.me/addstickers/{packname})"
                        + f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}  ô·¥Ä ô èü•Ä!",
                        parse_mode=ParseMode.MARKDOWN,
                    )
                elif e.message == "Invalid sticker emojis":
                    msg.reply_text("Invalid emoji(s).")
                elif e.message == "Stickers_too_much":
                    msg.reply_text("·¥ç·¥Äx ·¥ò·¥Ä·¥Ñ·¥ãÍú±…™·¥¢·¥á  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö. ·¥ò Ä·¥áÍú±Íú± Íú∞ ·¥õ·¥è ·¥ò·¥Ä è  Ä·¥áÍú±·¥ò·¥á·¥Ñ·¥Ñ  ô·¥Ä ô èü•Ä.")
                elif e.message == "Internal Server Error: sticker set not found (500)":
                    msg.reply_text(
                        "Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è [·¥ò·¥Ä·¥Ñ·¥ã](t.me/addstickers/%s)"
                        % packname
                        + "\n"
                        "·¥á·¥ç·¥è·¥ä…™ …™Íú±:" + " " + sticker_emoji,
                        parse_mode=ParseMode.MARKDOWN,
                    )
                print(e)

        else:
            packname = "animated" + str(user.id) + "_by_" + context.bot.username
            packname_found = 0
            max_stickers = 50
            while packname_found == 0:
                try:
                    stickerset = context.bot.get_sticker_set(packname)
                    if len(stickerset.stickers) >= max_stickers:
                        packnum += 1
                        packname = (
                            "animated"
                            + str(packnum)
                            + "_"
                            + str(user.id)
                            + "_by_"
                            + context.bot.username
                        )
                    else:
                        packname_found = 1
                except TelegramError as e:
                    if e.message == "Stickerset_invalid":
                        packname_found = 1
            try:
                context.bot.add_sticker_to_set(
                    user_id=user.id,
                    name=packname,
                    tgs_sticker=open("kangsticker.tgs", "rb"),
                    emojis=sticker_emoji,
                )
                msg.reply_text(
                    f"Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è [·¥ò·¥Ä·¥Ñ·¥ã](t.me/addstickers/{packname})"
                    + f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}  ô·¥Ä ô èü•Ä",
                    parse_mode=ParseMode.MARKDOWN,
                )
            except TelegramError as e:
                if e.message == "Stickerset_invalid":
                    makepack_internal(
                        update,
                        context,
                        msg,
                        user,
                        sticker_emoji,
                        packname,
                        packnum,
                        tgs_sticker=open("kangsticker.tgs", "rb"),
                    )
                elif e.message == "Invalid sticker emojis":
                    msg.reply_text("…™…¥·¥†·¥Ä ü…™·¥Ö ·¥á·¥ç·¥è·¥ä…™(s)  ô·¥Ä ô èü•Ä.")
                elif e.message == "Internal Server Error: sticker set not found (500)":
                    msg.reply_text(
                        "Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è [·¥ò·¥Ä·¥Ñ·¥ã](t.me/addstickers/%s)"
                        % packname
                        + "\n"
                        "·¥á·¥ç·¥è·¥ä…™ …™Íú±:" + " " + sticker_emoji,
                        parse_mode=ParseMode.MARKDOWN,
                    )
                print(e)

    elif args:
        try:
            try:
                urlemoji = msg.text.split(" ")
                png_sticker = urlemoji[1]
                sticker_emoji = urlemoji[2]
            except IndexError:
                sticker_emoji = "ü§î"
            urllib.urlretrieve(png_sticker, kangsticker)
            im = Image.open(kangsticker)
            maxsize = (512, 512)
            if (im.width and im.height) < 512:
                size1 = im.width
                size2 = im.height
                if im.width > im.height:
                    scale = 512 / size1
                    size1new = 512
                    size2new = size2 * scale
                else:
                    scale = 512 / size2
                    size1new = size1 * scale
                    size2new = 512
                size1new = math.floor(size1new)
                size2new = math.floor(size2new)
                sizenew = (size1new, size2new)
                im = im.resize(sizenew)
            else:
                im.thumbnail(maxsize)
            im.save(kangsticker, "PNG")
            msg.reply_photo(photo=open("kangsticker.png", "rb"))
            context.bot.add_sticker_to_set(
                user_id=user.id,
                name=packname,
                png_sticker=open("kangsticker.png", "rb"),
                emojis=sticker_emoji,
            )
            msg.reply_text(
                    f"Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è [·¥ò·¥Ä·¥Ñ·¥ã](t.me/addstickers/{packname})"
                    + f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}  ô·¥Ä ô èü•Ä",
                parse_mode=ParseMode.MARKDOWN,
            )
        except OSError as e:
            msg.reply_text("…™ ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è ·¥ã·¥Ä…¥…¢ …™·¥ç·¥Ä…¢·¥áÍú±  ô·¥Ä ô èü•Ä.")
            print(e)
            return
        except TelegramError as e:
            if e.message == "Stickerset_invalid":
                makepack_internal(
                    update,
                    context,
                    msg,
                    user,
                    sticker_emoji,
                    packname,
                    packnum,
                    png_sticker=open("kangsticker.png", "rb"),
                )
            elif e.message == "Sticker_png_dimensions":
                im.save(kangsticker, "PNG")
                context.bot.add_sticker_to_set(
                    user_id=user.id,
                    name=packname,
                    png_sticker=open("kangsticker.png", "rb"),
                    emojis=sticker_emoji,
                )
                msg.reply_text(
                    "Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è [·¥ò·¥Ä·¥Ñ·¥ã](t.me/addstickers/%s)"
                    % packname
                    + "\n"
                    + "·¥á·¥ç·¥è·¥ä…™ …™Íú±:"
                    + " "
                    + sticker_emoji,
                    parse_mode=ParseMode.MARKDOWN,
                )
            elif e.message == "Invalid sticker emojis":
                msg.reply_text("…™…¥·¥†·¥Ä ü…™·¥Ö ·¥á·¥ç·¥è·¥ä…™(s)  ô·¥Ä ô èü•Ä.")
            elif e.message == "Stickers_too_much":
                msg.reply_text("·¥ç·¥Äx ·¥ò·¥Ä·¥Ñ·¥ãÍú±…™·¥¢·¥á  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö. ·¥ò Ä·¥áÍú±Íú± Íú∞ ·¥õ·¥è ·¥ò·¥Ä è  Ä·¥áÍú±·¥ò·¥á·¥Ñ·¥Ñ  ô·¥Ä ô èü•Ä.")
            elif e.message == "Internal Server Error: sticker set not found (500)":
                msg.reply_text(
                    "Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è [·¥ò·¥Ä·¥Ñ·¥ã](t.me/addstickers/%s)"
                    % packname
                    + "\n"
                    "·¥á·¥ç·¥è·¥ä…™ …™Íú±:" + " " + sticker_emoji,
                    parse_mode=ParseMode.MARKDOWN,
                )
            print(e)
    else:
        packs = "·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä, ·¥è Ä …™·¥ç·¥Ä…¢·¥á ·¥õ·¥è ·¥ã·¥Ä…¥…¢ …™·¥õ  ô·¥Ä ô èü•Ä!\n·¥è ú,  ô è ·¥õ ú·¥á ·¥°·¥Ä è.  ú·¥á Ä·¥á ·¥Ä Ä·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ãÍú±  ô·¥Ä ô èü•Ä:\n"
        if packnum > 0:
            firstpackname = "a" + str(user.id) + "_by_" + context.bot.username
            for i in range(0, packnum + 1):
                if i == 0:
                    packs += f"[pack](t.me/addstickers/{firstpackname})\n"
                else:
                    packs += f"[pack{i}](t.me/addstickers/{packname})\n"
        else:
            packs += f"[pack](t.me/addstickers/{packname})"
        msg.reply_text(packs, parse_mode=ParseMode.MARKDOWN)
    try:
        if os.path.isfile("kangsticker.png"):
            os.remove("kangsticker.png")
        elif os.path.isfile("kangsticker.tgs"):
            os.remove("kangsticker.tgs")
    except:
        pass


def makepack_internal(
    update,
    context,
    msg,
    user,
    emoji,
    packname,
    packnum,
    png_sticker=None,
    tgs_sticker=None,
):
    name = user.first_name
    name = name[:50]
    try:
        extra_version = ""
        if packnum > 0:
            extra_version = " " + str(packnum)
        if png_sticker:
            success = context.bot.create_new_sticker_set(
                user.id,
                packname,
                f"{name}Íú± ·¥ã·¥Ä…¥…¢ ·¥ò·¥Ä·¥Ñ·¥ã  ô·¥Ä ô èü•Ä" + extra_version,
                png_sticker=png_sticker,
                emojis=emoji,
            )
        if tgs_sticker:
            success = context.bot.create_new_sticker_set(
                user.id,
                packname,
                f"{name}Íú± ·¥Ä…¥…™·¥ç·¥Ä·¥õ·¥á·¥Ö ·¥ã·¥Ä…¥…¢ ·¥ò·¥Ä·¥Ñ·¥ã  ô·¥Ä ô èü•Ä" + extra_version,
                tgs_sticker=tgs_sticker,
                emojis=emoji,
            )

    except TelegramError as e:
        print(e)
        if e.message == "Sticker set name is already occupied":
            msg.reply_text(
                " è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã ·¥Ñ·¥Ä…¥  ô·¥á Íú∞·¥è·¥ú…¥·¥Ö [ ú·¥á Ä·¥á](t.me/addstickers/%s)  ô·¥Ä ô èü•Ä" % packname,
                parse_mode=ParseMode.MARKDOWN,
            )
        elif e.message in ("Peer_id_invalid", "bot was blocked by the user"):
            msg.reply_text(
                "·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç Íú∞…™ ÄÍú±·¥õ  ô·¥Ä ô èü•Ä.",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="Íú±·¥õ·¥Ä Ä·¥õ", url=f"t.me/{context.bot.username}"
                            )
                        ]
                    ]
                ),
            )
        elif e.message == "Internal Server Error: created sticker set not found (500)":
            msg.reply_text(
                "Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö. …¢·¥á·¥õ …™·¥õ [ ú·¥á Ä·¥á](t.me/addstickers/%s)  ô·¥Ä ô èü•Ä"
                % packname,
                parse_mode=ParseMode.MARKDOWN,
            )
        return

    if success:
        msg.reply_text(
            "Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö. …¢·¥á·¥õ …™·¥õ [ ú·¥á Ä·¥á](t.me/addstickers/%s)  ô·¥Ä ô èü•Ä"
            % packname,
            parse_mode=ParseMode.MARKDOWN,
        )
    else:
        msg.reply_text("Íú∞·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã. ·¥ò·¥èÍú±Íú±…™ ô ü è ·¥Ö·¥ú·¥á ·¥õ·¥è  ô ü·¥Ä·¥Ñ·¥ã ·¥ç·¥Ä…¢…™·¥Ñ  ô·¥Ä ô èü•Ä.")


__help__ = """

¬ª `/stickerid`*:*  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è ·¥ç·¥á ·¥õ·¥è ·¥õ·¥á ü ü  è·¥è·¥ú …™·¥õÍú± Íú∞…™ ü·¥á …™·¥Ö.
¬ª `/getsticker`*:*  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è ·¥ç·¥á ·¥õ·¥è ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™·¥õÍú±  Ä·¥Ä·¥° ·¥ò…¥…¢ Íú∞…™ ü·¥á.
¬ª `/kang`*:*  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è ·¥Ä·¥Ö·¥Ö …™·¥õ ·¥õ·¥è  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.
¬ª `/stickers`*:* Íú∞…™…¥·¥Ö Íú±·¥õ…™·¥Ñ·¥ã·¥á ÄÍú± Íú∞·¥è Ä …¢…™·¥†·¥á…¥ ·¥õ·¥á Ä·¥ç ·¥è…¥ ·¥Ñ·¥è·¥ç ô·¥è·¥õ Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥Ñ·¥Ä·¥õ·¥Ä ü·¥è…¢·¥ú·¥á
¬ª `/tiny`*:* ·¥õ·¥è ·¥ç·¥Ä·¥ã·¥á Íú±·¥ç·¥Ä ü ü Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä
¬ª `/kamuii` <1-8> *:* ·¥õ·¥è ·¥Ö·¥á·¥á·¥ò·¥áÍú∞ è…™…¥…¢ Íú±·¥õ…™·¥ã·¥á Ä
¬ª `/mmf` < Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ·¥áx·¥õ>*:* ·¥õ·¥è ·¥Ö Ä·¥Ä·¥° ·¥Ä ·¥õ·¥áx·¥õ Íú∞·¥è Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥è Ä ·¥ò·¥è ú·¥è·¥õÍú±
¬ª `/stickers` <Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä …¥·¥Ä·¥ç·¥á> *:*  Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ ú·¥á Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä Íú±·¥á·¥õ
"""

__mod_name__ = "STICKER"
STICKERID_HANDLER = DisableAbleCommandHandler("stickerid", stickerid)
GETSTICKER_HANDLER = DisableAbleCommandHandler("getsticker", getsticker)
KANG_HANDLER = DisableAbleCommandHandler("kang", kang, admin_ok=True)
STICKERS_HANDLER = DisableAbleCommandHandler("stickers", cb_sticker)

dispatcher.add_handler(STICKERS_HANDLER)
dispatcher.add_handler(STICKERID_HANDLER)
dispatcher.add_handler(GETSTICKER_HANDLER)
dispatcher.add_handler(KANG_HANDLER)
