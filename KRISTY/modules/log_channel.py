from datetime import datetime
from functools import wraps
from telegram.ext import CallbackContext
from KRISTY.modules.helper_funcs.misc import is_module_loaded

FILENAME = __name__.rsplit(".", 1)[-1]

if is_module_loaded(FILENAME):
    from telegram import ParseMode, Update
    from telegram.error import BadRequest, Unauthorized
    from telegram.ext import CommandHandler, JobQueue, run_async
    from telegram.utils.helpers import escape_markdown

    from KRISTY import EVENT_LOGS, LOGGER, dispatcher
    from KRISTY.modules.helper_funcs.chat_status import user_admin
    from KRISTY.modules.sql import log_channel_sql as sql

    def loggable(func):
        @wraps(func)
        def log_action(
            update: Update,
            context: CallbackContext,
            job_queue: JobQueue = None,
            *args,
            **kwargs,
        ):
            if not job_queue:
                result = func(update, context, *args, **kwargs)
            else:
                result = func(update, context, job_queue, *args, **kwargs)

            chat = update.effective_chat
            message = update.effective_message

            if result:
                datetime_fmt = "%H:%M - %d-%m-%Y"
                result += f"\n<b>Event Stamp</b>: <code>{datetime.utcnow().strftime(datetime_fmt)}</code>"

                if message.chat.type == chat.SUPERGROUP and message.chat.username:
                    result += f'\n<b>Link:</b> <a href="https://t.me/{chat.username}/{message.message_id}">click here</a>'
                log_chat = sql.get_chat_log_channel(chat.id)
                if log_chat:
                    send_log(context, log_chat, chat.id, result)

            return result

        return log_action

    def gloggable(func):
        @wraps(func)
        def glog_action(update: Update, context: CallbackContext, *args, **kwargs):
            result = func(update, context, *args, **kwargs)
            chat = update.effective_chat
            message = update.effective_message

            if result:
                datetime_fmt = "%H:%M - %d-%m-%Y"
                result += "\n<b>Event Stamp</b>: <code>{}</code>".format(
                    datetime.utcnow().strftime(datetime_fmt)
                )

                if message.chat.type == chat.SUPERGROUP and message.chat.username:
                    result += f'\n<b>Link:</b> <a href="https://t.me/{chat.username}/{message.message_id}">click here</a>'
                log_chat = str(EVENT_LOGS)
                if log_chat:
                    send_log(context, log_chat, chat.id, result)

            return result

        return glog_action

    def send_log(
        context: CallbackContext, log_chat_id: str, orig_chat_id: str, result: str
    ):
        bot = context.bot
        try:
            bot.send_message(
                log_chat_id,
                result,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
            )
        except BadRequest as excp:
            if excp.message == "Chat not found":
                bot.send_message(
                    orig_chat_id, "·¥õ ú…™Íú±  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö - ·¥ú…¥Íú±·¥á·¥õ·¥õ…™…¥…¢  ô·¥Ä ô èü•Ä."
                )
                sql.stop_chat_logging(orig_chat_id)
            else:
                LOGGER.warning(excp.message)
                LOGGER.warning(result)
                LOGGER.exception("Could not parse")

                bot.send_message(
                    log_chat_id,
                    result
                    + "\n\nÍú∞·¥è Ä·¥ç·¥Ä·¥õ·¥õ…™…¥…¢  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö ·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ä…¥ ·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥á Ä Ä·¥è Ä  ô·¥Ä ô èü•Ä.",
                )

    @user_admin
    def logging(update: Update, context: CallbackContext):
        bot = context.bot
        message = update.effective_message
        chat = update.effective_chat

        log_channel = sql.get_chat_log_channel(chat.id)
        if log_channel:
            log_channel_info = bot.get_chat(log_channel)
            message.reply_text(
                f"·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò  ú·¥ÄÍú± ·¥Ä ü ü …™·¥õ'Íú±  ü·¥è…¢Íú± Íú±·¥á…¥·¥õ ·¥õ·¥è:"
                f" {escape_markdown(log_channel_info.title)} (`{log_channel}`)",
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            message.reply_text("…¥·¥è  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥á·¥õ Íú∞·¥è Ä ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò  ô·¥Ä ô èü•Ä!")

    @user_admin
    def setlog(update: Update, context: CallbackContext):
        bot = context.bot
        message = update.effective_message
        chat = update.effective_chat
        if chat.type == chat.CHANNEL:
            message.reply_text(
                "…¥·¥è·¥°, Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥á /setlog ·¥õ·¥è ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥õ…™·¥á ·¥õ ú…™Íú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è  ô·¥Ä ô èü•Ä!"
            )

        elif message.forward_from_chat:
            sql.set_chat_log_channel(chat.id, message.forward_from_chat.id)
            try:
                message.delete()
            except BadRequest as excp:
                if excp.message == "Message to delete not found":
                    pass
                else:
                    LOGGER.exception(
                        "ERROR deleting message in log channel. should work anyway though."
                    )

            try:
                bot.send_message(
                    message.forward_from_chat.id,
                    f"·¥õ ú…™Íú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥á·¥õ ·¥ÄÍú± ·¥õ ú·¥á  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü Íú∞·¥è Ä {chat.title or chat.first_name}.",
                )
            except Unauthorized as excp:
                if excp.message == "Forbidden: bot is not a member of the channel chat":
                    bot.send_message(chat.id, "Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è Íú±·¥á·¥õ  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ô·¥Ä ô èü•Ä!")
                else:
                    LOGGER.exception("ERROR in setting the log channel.")

            bot.send_message(chat.id, "Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è Íú±·¥á·¥õ  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ô·¥Ä ô èü•Ä!")

        else:
            message.reply_text(

            "·¥õ ú·¥á Íú±·¥õ·¥á·¥òÍú± ·¥õ·¥è Íú±·¥á·¥õ ·¥Ä  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä Ä·¥á:\n"
            " - ·¥Ä·¥Ö·¥Ö  ô·¥è·¥õ ·¥õ·¥è ·¥õ ú·¥á ·¥Ö·¥áÍú±…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü\n" 
            " - Íú±·¥á…¥·¥Ö /setlog ·¥õ·¥è ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü\n"
            " - Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥á /setlog ·¥õ·¥è ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò  ô·¥Ä ô èü•Ä\n"
            )

    @user_admin
    def unsetlog(update: Update, context: CallbackContext):
        bot = context.bot
        message = update.effective_message
        chat = update.effective_chat

        log_channel = sql.stop_chat_logging(chat.id)
        if log_channel:
            bot.send_message(
                log_channel, f"·¥Ñ ú·¥Ä…¥…¥·¥á ü  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥ú…¥ ü…™…¥·¥ã·¥á·¥Ö Íú∞ Ä·¥è·¥ç {chat.title}  ô·¥Ä ô èü•Ä"
            )
            message.reply_text(" ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥ú…¥-Íú±·¥á·¥õ  ô·¥Ä ô èü•Ä.")

        else:
            message.reply_text("…¥·¥è  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥á·¥õ  è·¥á·¥õ  ô·¥Ä ô èü•Ä!")

    def __stats__():
        return f"√ó {sql.num_logchannels()}  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú± Íú±·¥á·¥õ  ô·¥Ä ô èü•Ä."

    def __migrate__(old_chat_id, new_chat_id):
        sql.migrate_chat(old_chat_id, new_chat_id)

    def __chat_settings__(chat_id, user_id):
        log_channel = sql.get_chat_log_channel(chat_id)
        if log_channel:
            log_channel_info = dispatcher.bot.get_chat(log_channel)
            return f"·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò  ú·¥ÄÍú± ·¥Ä ü ü …™·¥õ'Íú±  ü·¥è…¢Íú± Íú±·¥á…¥·¥õ ·¥õ·¥è: {escape_markdown(log_channel_info.title)} (`{log_channel}`)  ô·¥Ä ô èü•Ä"
        return "…¥·¥è  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™Íú± Íú±·¥á·¥õ Íú∞·¥è Ä ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò  ô·¥Ä ô èü•Ä!"


    __help__ = """
¬ª `/logchannel`*:* …¢·¥á·¥õ  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™…¥Íú∞·¥è
¬ª `/setlog`*:* Íú±·¥á·¥õ ·¥õ ú·¥á  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü.
¬ª `/unsetlog`*:* ·¥ú…¥Íú±·¥á·¥õ ·¥õ ú·¥á  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü.

*Íú±·¥á·¥õ·¥õ…™…¥…¢ ·¥õ ú·¥á  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™Íú± ·¥Ö·¥è…¥·¥á  ô è*:

¬ª ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è ·¥õ ú·¥á ·¥Ö·¥áÍú±…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü (·¥ÄÍú± ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥!)
¬ª Íú±·¥á…¥·¥Ö…™…¥…¢ `/setlog` …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü
¬ª Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á `/setlog` ·¥õ·¥è ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò

"""

    __mod_name__ = "LOG-CHANNEL"

    LOG_HANDLER = CommandHandler("logchannel", logging, run_async=True)
    SET_LOG_HANDLER = CommandHandler("setlog", setlog, run_async=True)
    UNSET_LOG_HANDLER = CommandHandler("unsetlog", unsetlog, run_async=True)

    dispatcher.add_handler(LOG_HANDLER)
    dispatcher.add_handler(SET_LOG_HANDLER)
    dispatcher.add_handler(UNSET_LOG_HANDLER)

else:
    # run anyway if module not loaded
    def loggable(func):
        return func

    def gloggable(func):
        return func
