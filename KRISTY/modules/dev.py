import os
import subprocess
import sys

from contextlib import suppress
from time import sleep

import KRISTY

from KRISTY import dispatcher
from KRISTY.modules.helper_funcs.chat_status import dev_plus
from telegram import TelegramError, Update
from telegram.error import Unauthorized
from telegram.ext import CallbackContext, CommandHandler


@dev_plus
def allow_groups(update: Update, context: CallbackContext):
    args = context.args
    if not args:
        state = "Lockdown is " + "on" if not KRISTY.ALLOW_CHATS else "off"
        update.effective_message.reply_text(f"Current state: {state}")
        return
    if args[0].lower() in ["off", "no"]:
        KRISTY.ALLOW_CHATS = True
    elif args[0].lower() in ["yes", "on"]:
        KRISTY.ALLOW_CHATS = False
    else:
        update.effective_message.reply_text("Format: /lockdown Yes/No or Off/On  ô·¥Ä ô èü•Ä")
        return
    update.effective_message.reply_text("·¥Ö·¥è…¥·¥á!  ü·¥è·¥Ñ·¥ã·¥Ö·¥è·¥°…¥ ·¥†·¥Ä ü·¥ú·¥á ·¥õ·¥è…¢…¢ ü·¥á·¥Ö  ô·¥Ä ô èü•Ä.")


@dev_plus
def leave(update: Update, context: CallbackContext):
    bot = context.bot
    args = context.args
    if args:
        chat_id = str(args[0])
        try:
            bot.leave_chat(int(chat_id))
        except TelegramError:
            update.effective_message.reply_text(
                " ô·¥á·¥á·¥ò  ô·¥è·¥è·¥ò, …™ ·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ  ü·¥á·¥Ä·¥†·¥á ·¥õ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò(·¥Ö·¥ú…¥…¥·¥è ·¥° ú è ·¥õ ú·¥è)  ô·¥Ä ô èü•Ä.",
            )
            return
        with suppress(Unauthorized):
            update.effective_message.reply_text(" ô·¥á·¥á·¥ò  ô·¥è·¥è·¥ò, …™  ü·¥áÍú∞·¥õ ·¥õ ú·¥Ä·¥õ Íú±·¥è·¥ú·¥ò  ô·¥Ä ô èü•Ä!.")
    else:
        update.effective_message.reply_text("Íú±·¥á…¥·¥Ö ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ …™·¥Ö  ô·¥Ä ô èü•Ä")


@dev_plus
def gitpull(update: Update, context: CallbackContext):
    sent_msg = update.effective_message.reply_text(
        "·¥ò·¥ú ü ü…™…¥…¢ ·¥Ä ü ü ·¥Ñ ú·¥Ä…¥…¢·¥áÍú± Íú∞ Ä·¥è·¥ç  Ä·¥á·¥ç·¥è·¥õ·¥á ·¥Ä…¥·¥Ö ·¥õ ú·¥á…¥ ·¥Ä·¥õ·¥õ·¥á·¥ç·¥ò·¥õ…™…¥…¢ ·¥õ·¥è  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ  ô·¥Ä ô èü•Ä.",
    )
    subprocess.Popen("git pull", stdout=subprocess.PIPE, shell=True)

    sent_msg_text = sent_msg.text + "\n\n·¥Ñ ú·¥Ä…¥…¢·¥áÍú± ·¥ò·¥ú ü ü·¥á·¥Ö  ô·¥Ä ô èü•Ä...…™ …¢·¥ú·¥áÍú±Íú±..  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢ …™…¥ "

    for i in reversed(range(5)):
        sent_msg.edit_text(sent_msg_text + str(i + 1))
        sleep(1)

    sent_msg.edit_text(" Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  ô·¥Ä ô èü•Ä.")

    os.system("restart.bat")
    os.execv("start.bat", sys.argv)


@dev_plus
def restart(update: Update, context: CallbackContext):
    update.effective_message.reply_text(
        "Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥Ä …¥·¥á·¥° …™…¥Íú±·¥õ·¥Ä…¥·¥Ñ·¥á ·¥Ä…¥·¥Ö Íú± ú·¥ú·¥õ·¥õ…™…¥…¢ ·¥Ö·¥è·¥°…¥ ·¥õ ú…™Íú± ·¥è…¥·¥á  ô·¥Ä ô èü•Ä",
    )

    os.system("restart.bat")
    os.execv("start.bat", sys.argv)


LEAVE_HANDLER = CommandHandler("leave", leave, run_async=True)
GITPULL_HANDLER = CommandHandler("gitpull", gitpull, run_async=True)
RESTART_HANDLER = CommandHandler("reboot", restart, run_async=True)
ALLOWGROUPS_HANDLER = CommandHandler("lockdown", allow_groups, run_async=True)

dispatcher.add_handler(ALLOWGROUPS_HANDLER)
dispatcher.add_handler(LEAVE_HANDLER)
dispatcher.add_handler(GITPULL_HANDLER)
dispatcher.add_handler(RESTART_HANDLER)

__mod_name__ = "DEV"
__handlers__ = [LEAVE_HANDLER, GITPULL_HANDLER, RESTART_HANDLER, ALLOWGROUPS_HANDLER]
